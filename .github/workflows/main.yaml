name: Build and Demo App

# concurrency:
#   group: production
#   cancel-in-progress: true

on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: "npm"

      # install applicaion dependencies
      - name: Install dependencies
        # regular install and then clean install to confirm all dependencies are updated in the package-lock.json
        run: |
          npm install
          npm ci 

  push-to-docker-hub:
    runs-on: ubuntu-latest
    # Only run if app build successful
    needs: [build-test]
    # Build docker image and push to docker hub
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: dockerize
      - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/expressjs-demo:latest
          
        - name: Run the image in a container
          uses: addnab/docker-run-action@v3
          with:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/expressjs-demo:latest
            run: |
              echo "runing the docker image"
              echo "Testing the nodejs app endpoints"
              echo ${{ steps.docker_build.outputs.digest }}